- id: 1015
  dataTypes:
    - nids
  name: Command and Control Traffic Detection
  impact:
    confidentiality: 5
    integrity: 4
    availability: 3
  category: Command and Control
  technique: T1095 - Non-Application Layer Protocol
  adversary: origin
  references:
    - https://attack.mitre.org/techniques/T1095/
    - https://attack.mitre.org/techniques/T1571/
    - https://www.snort.org/rule_docs/
  description: Detects command and control (C2) communication patterns including suspicious periodic connections, non-standard ports, encrypted channels on unusual ports, DNS tunneling, and known C2 infrastructure indicators
  where: |
    (safe(log.alert.signature, "") contains "command and control" || 
     safe(log.alert.signature, "") contains "c&c" || 
     safe(log.alert.signature, "") contains "c2" ||
     safe(log.alert.signature, "") contains "beacon" ||
     safe(log.alert.signature, "") contains "cobalt strike" ||
     safe(log.alert.signature, "") contains "metasploit" ||
     safe(log.alert.category, "") == "malware-cnc" ||
     safe(log.alert.category, "") == "suspicious-traffic" ||
     (safe(destination.port, 0) > 1024 && safe(destination.port, 0) not in [3306, 5432, 8080, 8443] && safe(log.tls.established, false) == true) ||
     (safe(log.protocol, "") == "DNS" && safe(log.dns.type, "") == "TXT" && safe(log.dns.response_length, 0) > 200) ||
     (safe(log.http.uri, "") matches "^/[a-zA-Z0-9]{8,16}$" && safe(log.http.method, "") == "GET") ||
     (safe(log.flow.duration, 0) > 300 && safe(log.flow.packets, 0) < 100 && safe(log.flow.bytes, 0) < 10240) ||
     safe(log.ja3.hash, "") in ["3b5074b1b5d032e5620f69f9f700ff0e", "6734f37431670b3ab4292b8f60f29984"]) &&
    safe(origin.ip, "") != "" &&
    safe(destination.ip, "") != "" &&
    !safe(destination.ip, "") matches "^(10\\.|172\\.(1[6-9]|2[0-9]|3[01])\\.|192\\.168\\.)"
  afterEvents:
    - indexPattern: v11-log-*
      with:
        - field: origin.ip.keyword
          operator: filter_term
          value: '{{origin.ip}}'
        - field: destination.ip.keyword
          operator: filter_term
          value: '{{destination.ip}}'
      within: now-2h
      count: 20
  deduplicateBy:
    - origin.ip
    - destination.ip
    - destination.port