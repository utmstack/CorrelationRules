- id: 1002
  dataTypes:
    - redis
  name: Redis Unauthorized Access Pattern Detected
  impact:
    confidentiality: 5
    integrity: 4
    availability: 2
  category: Unauthorized Access
  technique: Valid Accounts
  adversary: origin
  references:
    - https://medium.com/@Victor.Z.Zhu/redis-unauthorized-access-vulnerability-simulation-victor-zhu-ac7a71b2e419
    - https://attack.mitre.org/techniques/T1078/
  description: Detects patterns indicative of unauthorized access attempts to Redis including authentication failures, dangerous command usage without authentication, or attempts to bypass security restrictions
  where: |
    safe(log.msg, "") != "" && (
      (safe(log.msg, "").matches("(?i)(AUTH\\s+failed|invalid\\s+password|authentication\\s+required)")) ||
      (safe(log.msg, "").matches("(?i)(FLUSHALL|FLUSHDB|CONFIG\\s+(GET|SET)|KEYS\\s+\\*|SCAN\\s+0)") && safe(log.severity, "") == "warning") ||
      (safe(log.msg, "").matches("(?i)CONFIG\\s+SET\\s+(dir\\s+/|dbfilename\\s+authorized_keys)")) ||
      (safe(log.msg, "").matches("(?i)(SAVE|BGSAVE).*ssh|authorized_keys")) ||
      (safe(log.msg, "").matches("(?i)Client\\s+id=\\d+\\s+addr=.*\\s+name=.*\\s+cmd=(flushall|flushdb|config)")) ||
      (safe(severity, "") == "high" && safe(log.msg, "").matches("(?i)(Possible\\s+security\\s+attack|unauthorized\\s+client)"))
    )
  afterEvents:
    - indexPattern: v11-log-*
      with:
        - field: origin.host.keyword
          operator: filter_term
          value: '{{origin.host}}'
      within: now-10m
      count: 5
  deduplicateBy:
    - origin.host
    - log.origin.ips