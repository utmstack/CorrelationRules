- id: 1021
  dataTypes:
    - mysql
  name: JSON Function Exploitation Attempt
  impact:
    confidentiality: 4
    integrity: 3
    availability: 2
  category: Code Injection
  technique: SQL Injection via JSON Functions
  adversary: origin
  references:
    - https://dev.mysql.com/doc/refman/8.0/en/json-functions.html
    - https://www.picussecurity.com/resource/blog/waf-bypass-using-json-based-sql-injection-attacks
    - https://attack.mitre.org/techniques/T1190/
  description: Detects attempts to exploit MySQL JSON functions to bypass security controls or perform SQL injection attacks. Attackers may use JSON functions like JSON_EXTRACT, JSON_SET, or JSON_SEARCH with malicious payloads to bypass WAF filters or execute unauthorized queries.
  where: |
    safe(action, "") == "mysql.error" && 
    safe(severity, "") == "high" &&
    safe(log.msg, "") != "" && 
    (
      log.msg.contains("JSON_EXTRACT") ||
      log.msg.contains("JSON_SET") ||
      log.msg.contains("JSON_INSERT") ||
      log.msg.contains("JSON_REPLACE") ||
      log.msg.contains("JSON_REMOVE") ||
      log.msg.contains("JSON_SEARCH") ||
      log.msg.contains("JSON_MERGE") ||
      log.msg.contains("JSON_SCHEMA_VALID") ||
      log.msg.contains("->") ||
      log.msg.contains("->>")
    ) && 
    (
      log.msg.contains("syntax error") ||
      log.msg.contains("Incorrect") ||
      log.msg.contains("Invalid JSON") ||
      log.msg.contains("malformed") ||
      log.msg.contains("denied") ||
      log.msg.contains("violation")
    )
  afterEvents:
    - indexPattern: v11-log-*
      with:
        - field: origin.host.keyword
          operator: filter_term
          value: '{{origin.host}}'
      within: now-15m
      count: 10
  deduplicateBy:
    - origin.host